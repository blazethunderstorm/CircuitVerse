- require 'pathname'
+ require "fileutils"
- require 'fileutils'
- include FileUtils

- # path to your application root.
+ APP_ROOT = File.expand_path("..", __dir__)
- APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)
+ APP_NAME = "logix"

  def system!(*args)
-   system(*args) || abort("\n== Command #{args} failed ==")
+   system(*args, exception: true)
  end

- def check_command(command)
+ FileUtils.chdir APP_ROOT do
-   system("which #{command} > /dev/null 2>&1")
+   # This script is a way to set up or update your development environment automatically.
- end
+   # This script is idempotent, so that you can run it at any time and get an expectable outcome.
+   # Add necessary setup steps to this file.

- def print_section(title)
+   puts "== Installing dependencies =="
-   puts "\n" + "=" * 50
+   system! "gem install bundler --conservative"
-   puts "== #{title} =="
+   system("bundle check") || system!("bundle install")
-   puts "=" * 50
- end

- def print_substep(message)
+   # puts "\n== Copying sample files =="
-   puts "   → #{message}"
+   # unless File.exist?("config/database.yml")
- end
+   #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
+   # end

- def check_dependencies
+   puts "\n== Preparing database =="
-   print_section "Checking Dependencies"
+   system! "bin/rails db:prepare"

-   dependencies = {
+   puts "\n== Removing old logs and tempfiles =="
-     'git' => 'Git version control',
+   system! "bin/rails log:clear tmp:clear"
-     'ruby' => 'Ruby programming language',
-     'bundle' => 'Ruby Bundler',
-     'node' => 'Node.js runtime',
-     'yarn' => 'Yarn package manager',
-     'psql' => 'PostgreSQL client',
-     'redis-cli' => 'Redis client',
-     # 'convert' => 'ImageMagick (convert command)',
-     'cmake' => 'CMake build system',
-     'openssl' => 'OpenSSL',
-     'foreman' => 'Process manager (for bin/dev)'
-   }

-   missing_deps = []
+   puts "\n== Restarting application server =="
+   system! "bin/rails restart"

-   dependencies.each do |cmd, desc|
+   # puts "\n== Configuring puma-dev =="
-     if check_command(cmd)
+   # system "ln -nfs #{APP_ROOT} ~/.puma-dev/#{APP_NAME}"
-       print_substep "✓ #{desc} found"
+   # system "curl -Is https://#{APP_NAME}.test/up | head -n 1"
-     else
-       print_substep "✗ #{desc} missing (#{cmd})"
-       missing_deps << cmd
-     end
-   end
-
-   # Check Yarn version specifically
-   if check_command('yarn')
-     yarn_version = `yarn --version`.strip
-     required_yarn = "1.22.19"
-     print_substep "Yarn version: #{yarn_version} (required: #{required_yarn})"
-
-     if yarn_version != required_yarn
-       puts "\n⚠️  Consider updating Yarn to version #{required_yarn}"
-       puts "Current version #{yarn_version} may work but #{required_yarn} is recommended"
-     end
-   end
-
-   # Check for Vite (frontend build tool)
-   if check_command('npx')
-     print_substep "✓ npx found (needed for Vite)"
-   end
-
-   unless missing_deps.empty?
-     puts "\n⚠️  Missing dependencies detected!"
-     puts "Please install the following before continuing:"
-     missing_deps.each { |dep| puts "   - #{dep}" }
-     puts "\nRefer to the installation guide for dependency installation commands."
-     puts "Or if using asdf, run: asdf install"
-     abort("Setup cannot continue without required dependencies.")
-   end
-
-   puts "\n✅ All dependencies found!"
- end
-
- def check_services
-   print_section "Checking Required Services"
-
-   # Check PostgreSQL
-   print_substep "Checking PostgreSQL connection..."
-   if system('pg_isready > /dev/null 2>&1')
-     print_substep "✓ PostgreSQL is running"
-   else
-     puts "\n⚠️  PostgreSQL is not running!"
-     puts "Please start PostgreSQL with:"
-     puts "   sudo systemctl start postgresql"
-     puts "   # or on macOS: brew services start postgresql"
-     abort("PostgreSQL must be running to continue setup.")
-   end
-
-   # Check Redis
-   print_substep "Checking Redis connection..."
-   if system('redis-cli ping > /dev/null 2>&1')
-     print_substep "✓ Redis is running"
-   else
-     puts "\n⚠️  Redis is not running!"
-     puts "Please start Redis with:"
-     puts "   sudo systemctl start redis"
-     puts "   # or on macOS: brew services start redis"
-     abort("Redis must be running to continue setup.")
-   end
- end
-
- def check_ruby_version
-   print_section "Checking Ruby Version"
-
-   minimum_version = "3.3.0"
-   current_version = RUBY_VERSION
-
-   print_substep "Minimum Ruby version: #{minimum_version}"
-   print_substep "Current Ruby version: #{current_version}"
-
-   if Gem::Version.new(current_version) < Gem::Version.new(minimum_version)
-     puts "\n⚠️  Ruby version too old!"
-     puts "This project requires Ruby #{minimum_version} or higher"
-     puts "Current version is #{current_version}"
-     puts "\nTo install a compatible version:"
-     puts "   # With RVM:"
-     puts "   rvm install #{minimum_version}"
-     puts "   rvm use #{minimum_version}"
-     puts "   # With rbenv:"
-     puts "   rbenv install #{minimum_version}"
-     puts "   rbenv local #{minimum_version}"
-     puts "   # With asdf:"
-     puts "   asdf install ruby #{minimum_version}"
-     puts "   asdf local ruby #{minimum_version}"
-     abort("Please install Ruby #{minimum_version} or higher before continuing.")
-   end
-
-   print_substep "✓ Ruby version is compatible"
- end
-
- def check_node_version
-   print_section "Checking Node.js Version"
-
-   minimum_version = "22.13.0"
-
-   if check_command('node')
-     current_version = `node --version`.strip.gsub('v', '')
-     print_substep "Minimum Node.js version: #{minimum_version}"
-     print_substep "Current Node.js version: #{current_version}"
-
-     # Check if current version meets minimum requirement
-     if Gem::Version.new(current_version) < Gem::Version.new(minimum_version)
-       puts "\n⚠️  Node.js version too old!"
-       puts "This project requires Node.js #{minimum_version} or higher"
-       puts "Current version is #{current_version}"
-       puts "\nTo install a compatible version:"
-       puts "   # With nvm:"
-       puts "   nvm install #{minimum_version}"
-       puts "   nvm use #{minimum_version}"
-       puts "   # With asdf:"
-       puts "   asdf install nodejs #{minimum_version}"
-       puts "   asdf local nodejs #{minimum_version}"
-       abort("Please install Node.js #{minimum_version} or higher before continuing.")
-     end
-
-     print_substep "✓ Node.js version is compatible"
-   end
- end
-
- chdir APP_ROOT do
-   puts "CircuitVerse Development Environment Setup"
-   puts "========================================="
-
-   # Check system dependencies
-   check_dependencies
-
-   # Check Ruby version
-   check_ruby_version
-
-   # Check Node.js version
-   check_node_version
-
-   # Check required services
-   check_services
-
-   print_section "Installing Ruby Dependencies"
-   print_substep "Installing/updating bundler..."
-   system! 'gem install bundler --conservative'
-
-   print_substep "Checking bundle status..."
-   unless system('bundle check > /dev/null 2>&1')
-     print_substep "Installing Ruby gems..."
-     system! 'bundle install'
-   else
-     print_substep "✓ Ruby dependencies already satisfied"
-   end
-
-   print_section "Installing JavaScript Dependencies"
-
-   # Main project dependencies
-   if File.exist?('package.json')
-     print_substep "Installing main project Node.js packages with Yarn..."
-     system! 'yarn install'
-   else
-     print_substep "No package.json found in root, skipping main Yarn installation"
-   end
-
-   # Frontend Vue project dependencies
-   if File.exist?('cv-frontend-vue/package.json')
-     print_substep "Installing cv-frontend-vue dependencies..."
-     chdir 'cv-frontend-vue' do
-       system! 'npm install'
-     end
-   else
-     print_substep "cv-frontend-vue directory not found, skipping frontend dependencies"
-   end
-
-   # Check if Vite is properly configured
-   if File.exist?('vite.config.ts')
-     print_substep "✓ Vite configuration found"
-   else
-     print_substep "⚠️  vite.config.ts not found"
-   end
-
-   print_section "Setting Up Configuration Files"
 "   - config/database.example.yml"

end
